I"r'<h1 id="lets-spike-some-user-input-in-elm">Lets spike some user input in Elm</h1>

<p>So came back to Elm. Enjoying it, something clicked. Probably the moment i started writing currying functions in c#.</p>

<p>For those not in the know. c# doesn’t support currying, i ended up returning  lambdas that closed over the parameters of the function called CreateSomeFunction. It felt really broken …</p>

<p>So too the hint, clearly a good time to go back to something functional and so back to Elm. Once again playing with the kool aid kids.</p>

<p>So Started to write a game (because a game is always a really smooth learning curve for a new language - I also suck at web dev …)</p>

<p>So this will be fun.</p>

<h2 id="lets-set-up-the-project">Lets set up the project</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>

<p>Then head over to github and grab an elm <code class="language-plaintext highlighter-rouge">.gitignore</code> file</p>

<p>Next install the base elm package</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>elm package <span class="nb">install</span>
</code></pre></div></div>

<p>Then update the sources folder</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"source-directories"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"./src"</span><span class="w">
    </span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Now we are going to need a keyboard library. If you google ‘elm language’ you will end up at <a href="http://package.elm-lang.org/packages/elm-lang/keyboard/latest">this</a> page. Install it like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>elm-package <span class="nb">install </span>elm-lang/keyboard
</code></pre></div></div>

<h2 id="the-code">The code</h2>

<p>Below is a big blurt of code:</p>

<h3 id="highlights">Highlights</h3>

<ul>
  <li>import Set: Need a de duplicated non ordered collection of keys</li>
  <li>Subscription: This is what kicked my ass. A subscription is of type <code class="language-plaintext highlighter-rouge">Sub Msg</code> yet we need to sign up to both key up and key down events turns out you can create a batch.</li>
</ul>

<p>The code for this is: (and no i dont have the foggiest how it works)</p>

<div class="language-elm highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">{-| When you need to subscribe to multiple things, you can create a `batch` of
subscriptions.
**Note:** `Sub.none` and `Sub.batch [ Sub.none, Sub.none ]` and
`Sub.batch []` all do the same thing.
-}</span>
<span class="n">batch</span> <span class="p">:</span> <span class="kt">List</span> <span class="p">(</span><span class="kt">Sub</span> <span class="n">msg</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Sub</span> <span class="n">msg</span>
<span class="n">batch</span> <span class="o">=</span>
<span class="kt">Elm</span><span class="o">.</span><span class="kt">Kernel</span><span class="o">.</span><span class="kt">Platform</span><span class="o">.</span><span class="n">batch</span>

</code></pre></div></div>

<p>The code for handling user input is below. Put it in <code class="language-plaintext highlighter-rouge">./src/</code> and <code class="language-plaintext highlighter-rouge">elm-reactor</code></p>

<figure class="highlight"><pre><code class="language-elm" data-lang="elm"><span class="k">import</span> <span class="kt">Html</span> <span class="k">exposing</span> <span class="p">(</span><span class="o">..</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Keyboard</span> <span class="k">exposing</span> <span class="p">(</span><span class="kt">KeyCode</span><span class="p">)</span>
<span class="k">import</span> <span class="kt">Set</span> <span class="k">exposing</span> <span class="p">(</span><span class="o">..</span><span class="p">)</span>

<span class="n">main</span> <span class="p">:</span> <span class="kt">Program</span> <span class="kt">Never</span> <span class="kt">Model</span> <span class="kt">Msg</span>
<span class="n">main</span> <span class="o">=</span>
    <span class="kt">Html</span><span class="o">.</span><span class="n">program</span>
        <span class="p">{</span> <span class="n">init</span> <span class="o">=</span> <span class="n">init</span>
        <span class="o">,</span> <span class="n">view</span> <span class="o">=</span> <span class="n">view</span>
        <span class="o">,</span> <span class="n">update</span> <span class="o">=</span> <span class="n">update</span>
        <span class="o">,</span> <span class="n">subscriptions</span> <span class="o">=</span> <span class="n">subscriptions</span>
    <span class="p">}</span>

<span class="k">type</span> <span class="k">alias</span> <span class="kt">Model</span> <span class="o">=</span>
    <span class="p">{</span> <span class="n">pressedKeys</span> <span class="p">:</span> <span class="kt">Set</span> <span class="kt">KeyCode</span>
    <span class="p">}</span>

<span class="k">type</span> <span class="kt">Msg</span>
    <span class="o">=</span> <span class="kt">KeyChange</span> <span class="kt">Bool</span> <span class="kt">KeyCode</span>

<span class="n">update</span> <span class="p">:</span> <span class="kt">Msg</span> <span class="o">-&gt;</span> <span class="kt">Model</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Model</span><span class="o">,</span> <span class="kt">Cmd</span> <span class="kt">Msg</span><span class="p">)</span>
<span class="n">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">case</span> <span class="n">msg</span> <span class="k">of</span>
        <span class="kt">KeyChange</span> <span class="n">pressed</span> <span class="n">keyCode</span>  <span class="o">-&gt;</span>
            <span class="p">(</span><span class="n">handleKeyChange</span> <span class="n">pressed</span> <span class="n">keyCode</span> <span class="n">model</span><span class="o">,</span> <span class="kt">Cmd</span><span class="o">.</span><span class="n">none</span><span class="p">)</span>

<span class="n">handleKeyChange</span> <span class="p">:</span> <span class="kt">Bool</span> <span class="o">-&gt;</span> <span class="kt">KeyCode</span> <span class="o">-&gt;</span> <span class="kt">Model</span> <span class="o">-&gt;</span> <span class="kt">Model</span>
<span class="n">handleKeyChange</span> <span class="n">pressed</span> <span class="n">keyCode</span> <span class="n">model</span> <span class="o">=</span>
  <span class="k">let</span>
    <span class="n">fn</span> <span class="o">=</span> <span class="k">if</span> <span class="n">pressed</span> <span class="k">then</span> <span class="kt">Set</span><span class="o">.</span><span class="n">insert</span> <span class="k">else</span> <span class="kt">Set</span><span class="o">.</span><span class="n">remove</span>
    <span class="n">pressedKeys</span> <span class="o">=</span> <span class="n">fn</span> <span class="n">keyCode</span> <span class="n">model</span><span class="o">.</span><span class="n">pressedKeys</span>
  <span class="k">in</span>
    <span class="p">{</span> <span class="n">model</span> <span class="o">|</span> <span class="n">pressedKeys</span> <span class="o">=</span> <span class="n">pressedKeys</span> <span class="p">}</span>


<span class="n">view</span> <span class="p">:</span> <span class="kt">Model</span> <span class="o">-&gt;</span> <span class="kt">Html</span> <span class="kt">Msg</span>
<span class="n">view</span> <span class="n">model</span> <span class="o">=</span>
    <span class="n">div</span> <span class="p">[]</span>
        <span class="p">[</span> <span class="p">(</span><span class="kt">Set</span><span class="o">.</span><span class="n">isEmpty</span> <span class="n">model</span><span class="o">.</span><span class="n">pressedKeys</span><span class="p">)</span>
          <span class="o">|&gt;</span> <span class="n">toString</span>
          <span class="o">|&gt;</span> <span class="n">text</span>
        <span class="p">]</span>

<span class="n">init</span> <span class="p">:</span> <span class="p">(</span><span class="kt">Model</span><span class="o">,</span> <span class="kt">Cmd</span> <span class="kt">Msg</span><span class="p">)</span>
<span class="n">init</span> <span class="o">=</span>
    <span class="p">(</span><span class="kt">Model</span> <span class="kt">Set</span><span class="o">.</span><span class="n">empty</span>  <span class="o">,</span> <span class="kt">Cmd</span><span class="o">.</span><span class="n">none</span><span class="p">)</span>

<span class="n">subscriptions</span> <span class="p">:</span> <span class="kt">Model</span> <span class="o">-&gt;</span> <span class="kt">Sub</span> <span class="kt">Msg</span>
<span class="n">subscriptions</span> <span class="n">model</span> <span class="o">=</span>
    <span class="k">let</span>
        <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span> <span class="kt">Keyboard</span><span class="o">.</span><span class="n">downs</span> <span class="p">(</span><span class="kt">KeyChange</span> <span class="kt">True</span><span class="p">)</span>
               <span class="o">,</span> <span class="kt">Keyboard</span><span class="o">.</span><span class="n">ups</span> <span class="p">(</span><span class="kt">KeyChange</span> <span class="kt">False</span><span class="p">)</span>
               <span class="p">]</span>
    <span class="k">in</span>
    <span class="n">keys</span> <span class="o">|&gt;</span> <span class="kt">Sub</span><span class="o">.</span><span class="n">batch</span></code></pre></figure>
:ET