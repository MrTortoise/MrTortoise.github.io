I"•<h2 id="the-repo-backing-this-code-is-here">The repo backing this code is <a href="https://github.com/MrTortoise/elixir-app-minimal">here</a>.</h2>
<p>It is literally a result of me working through the docs, nothing original.</p>

<h2 id="agent"><a href="http://elixir-lang.org/getting-started/mix-otp/agent.html">Agent</a></h2>

<h3 id="purpose">Purpose</h3>
<p>It is a wrapper around state.</p>

<h3 id="notes">Notes</h3>

<ol>
  <li>Introduces <code class="language-plaintext highlighter-rouge">Agent.start_link/0</code> This is the equivalent of the <a href="http://elixir-lang.org/getting-started/processes.html">process</a> <code class="language-plaintext highlighter-rouge">spawn_link</code> as far as I can tell.
    <blockquote>
      <p>Because processes are linked, we now see a message saying the parent
process, which is the shell process, has received an EXIT signal from
another process causing the shell to terminate. IEx detects this
situation and starts a new shell session.</p>
    </blockquote>
  </li>
</ol>

<p>See <code class="language-plaintext highlighter-rouge">Task.start_link/1</code></p>
<blockquote>
  <p>Task provides convenience functions, like Task.async/1 and Task.await/1, and functionality to ease distribution â€¦ for now it is enough to remember to use Task to get better error reports.</p>
</blockquote>

<ol>
  <li>` Agent.get(bucket, &amp;Map.get(&amp;1, key))<code class="language-plaintext highlighter-rouge"> The map function gets executed in the process of the Agent. So the &amp;1 actually refers to the bucket and hence why you have to capture it with the </code>&amp;` operator. So this is important:</li>
</ol>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="n">delete</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="k">do</span>
   <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="c1"># puts client to sleep</span>
   <span class="no">Agent</span><span class="o">.</span><span class="n">get_and_update</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="k">fn</span> <span class="n">dict</span> <span class="o">-&gt;</span>
     <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="c1"># puts server to sleep</span>
     <span class="no">Map</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
   <span class="k">end</span><span class="p">)</span>
 <span class="k">end</span>
</code></pre></div></div>
:ET