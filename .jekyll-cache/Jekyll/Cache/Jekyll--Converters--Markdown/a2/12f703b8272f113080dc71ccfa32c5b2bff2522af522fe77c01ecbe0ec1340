I"S3<h2 id="the-reps-backing-this-code-is-here">The reps backing this code is <a href="https://github.com/MrTortoise/elixir-app-minimal">here</a>.</h2>
<p>It is literally a result of me working through the docs, nothing original.</p>

<h2 id="genserver"><a href="http://elixir-lang.org/getting-started/mix-otp/genserver.html">GenServer</a></h2>
<p>The <a href="https://hexdocs.pm/elixir/GenServer.html">Full Gen ServerDocumentaiton is here</a></p>

<p>The code these notes refer to:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">defmodule</span> <span class="no">KV</span><span class="o">.</span><span class="no">Registry</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">GenServer</span>

  <span class="c1">## Client API</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Starts the registry.
  """</span>
  <span class="k">def</span> <span class="n">start_link</span> <span class="k">do</span>
    <span class="no">GenServer</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:ok</span><span class="p">,</span> <span class="p">[])</span>
  <span class="k">end</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Looks up the bucket pid for `name` stored in `server`.

  Returns `{:ok, pid}` if the bucket exists, `:error` otherwise.
  """</span>
  <span class="k">def</span> <span class="n">lookup</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">GenServer</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="p">{</span><span class="ss">:lookup</span><span class="p">,</span> <span class="n">name</span><span class="p">})</span>
  <span class="k">end</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Ensures there is a bucket associated to the given `name` in `server`.
  """</span>
  <span class="k">def</span> <span class="n">create</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">GenServer</span><span class="o">.</span><span class="n">cast</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="p">{</span><span class="ss">:create</span><span class="p">,</span> <span class="n">name</span><span class="p">})</span>
  <span class="k">end</span>

  <span class="c1">## Server Callbacks</span>

  <span class="k">def</span> <span class="n">init</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%{}}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">handle_call</span><span class="p">({</span><span class="ss">:lookup</span><span class="p">,</span> <span class="n">name</span><span class="p">},</span> <span class="n">_from</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:reply</span><span class="p">,</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span> <span class="n">names</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">handle_cast</span><span class="p">({</span><span class="ss">:create</span><span class="p">,</span> <span class="n">name</span><span class="p">},</span> <span class="n">names</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">if</span> <span class="no">Map</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">names</span><span class="p">}</span>
    <span class="k">else</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">bucket</span><span class="p">}</span> <span class="o">=</span> <span class="no">KV</span><span class="o">.</span><span class="no">Bucket</span><span class="o">.</span><span class="n">start_link</span>
      <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="no">Map</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bucket</span><span class="p">)}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<ol>
  <li>Separate client api and server callbacks.
    <ul>
      <li>server callbacks: <code class="language-plaintext highlighter-rouge">init/1</code>, <code class="language-plaintext highlighter-rouge">handle_cast/2</code> and <code class="language-plaintext highlighter-rouge">handle_call/2</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">start_link/3</code> calls <code class="language-plaintext highlighter-rouge">GenServer.start_link(__MODULE__, :ok, [])</code>
    <ul>
      <li>interesting as it passes the current module as the name. But also initialisation arguments (<code class="language-plaintext highlighter-rouge">:ok</code>) and options</li>
    </ul>
  </li>
  <li>callbacks
    <ul>
      <li><code class="language-plaintext highlighter-rouge">init/1</code> takes the argument from <code class="language-plaintext highlighter-rouge">GenServer.start_link, return s{:ok, state}</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">handle_call</code> is hit from <code class="language-plaintext highlighter-rouge">GenServer.call(server, {:lookup, name})</code> - gotta wonder how that <code class="language-plaintext highlighter-rouge">_from</code> would get populated given the indirection.</li>
    </ul>
  </li>
</ol>

<p>Problem with code above is that if a  bucket process stops the name remains in the registry. So some cleanup is required.</p>

<p>The server side code is modified to the following</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Server callbacks</span>

<span class="k">def</span> <span class="n">init</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">names</span> <span class="o">=</span> <span class="p">%{}</span>
  <span class="n">refs</span>  <span class="o">=</span> <span class="p">%{}</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">refs</span><span class="p">}}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="n">handle_call</span><span class="p">({</span><span class="ss">:lookup</span><span class="p">,</span> <span class="n">name</span><span class="p">},</span> <span class="n">_from</span><span class="p">,</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">_</span><span class="p">}</span> <span class="o">=</span> <span class="n">state</span><span class="p">)</span> <span class="k">do</span>
  <span class="p">{</span><span class="ss">:reply</span><span class="p">,</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span> <span class="n">state</span><span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="n">handle_cast</span><span class="p">({</span><span class="ss">:create</span><span class="p">,</span> <span class="n">name</span><span class="p">},</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">refs</span><span class="p">})</span> <span class="k">do</span>
  <span class="k">if</span> <span class="no">Map</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">refs</span><span class="p">}}</span>
  <span class="k">else</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">pid</span><span class="p">}</span> <span class="o">=</span> <span class="no">KV</span><span class="o">.</span><span class="no">Bucket</span><span class="o">.</span><span class="n">start_link</span>
    <span class="n">ref</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">monitor</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
    <span class="n">refs</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">refs</span><span class="p">,</span> <span class="n">ref</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
    <span class="n">names</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span>
    <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">refs</span><span class="p">}}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="n">handle_info</span><span class="p">({</span><span class="ss">:DOWN</span><span class="p">,</span> <span class="n">ref</span><span class="p">,</span> <span class="ss">:process</span><span class="p">,</span> <span class="n">_pid</span><span class="p">,</span> <span class="n">_reason</span><span class="p">},</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">refs</span><span class="p">})</span> <span class="k">do</span>
  <span class="p">{</span><span class="n">name</span><span class="p">,</span> <span class="n">refs</span><span class="p">}</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">refs</span><span class="p">,</span> <span class="n">ref</span><span class="p">)</span>
  <span class="n">names</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
  <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="p">{</span><span class="n">names</span><span class="p">,</span> <span class="n">refs</span><span class="p">}}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="n">handle_info</span><span class="p">(</span><span class="n">_msg</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="k">do</span>
  <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>
<ol>
  <li>Previously the code only had one map in the init - the names map. Now there is also a refs map. So in handle call the state is returned rather than just names.</li>
  <li>The code includes the <code class="language-plaintext highlighter-rouge">handle_info</code> calls which are used here for handling the supervision related jobs. Any message sent that is not via <code class="language-plaintext highlighter-rouge">call</code> or <code class="language-plaintext highlighter-rouge">cast</code> hits this endpoint.</li>
</ol>

<h3 id="monitors-or-links">Monitors or links</h3>
<p>Final point is that with linked process if 1 dies both die. With monitoring only th emonitoring process gets info. In <code class="language-plaintext highlighter-rouge">handle_cast</code> above we do both … this is bad.</p>
:ET